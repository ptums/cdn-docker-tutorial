# ~/localwebinfa/loadbalancer/nginx.conf

events { }

http {
    # ─── whitelist allowed origins ─────────────────────────────────────────
    map $http_origin $cors_origin {
        default "";
        # exact origins
        "http://localhost:8080"      $http_origin;
        "http://localhost:8090"      $http_origin;
        "http://edge-site-us.local:8081"  $http_origin;
        "http://edge-site-eu.local:8082"  $http_origin;
        "https://edge-site-us.local:8443"  $http_origin;
        "https://edge-site-eu.local:8444"  $http_origin;
        "http://localhost:3000"      $http_origin;
    }

    # ── Define the two edge backends in a round‑robin group ────────────────
    upstream edges {
        # The name “edges” is our pool of backend servers
        server edge-site-us.local:80;
        server edge-site-eu.local:80;
    }

    # ─── UPDATED: API upstream ────────────────────────────────────────
    upstream apis {
        # point at the API container by name on the Docker network
        server api:4000;
    }

    server {
        # Listen on HTTP port 80 inside the container
        listen 80;
        server_name lb.local;

 
        location / {
            # hide any CORS headers from upstream
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;

            # handle preflight
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin'  $http_origin  always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
                add_header 'Access-Control-Max-Age'       1728000           always;
                return 204;
            }

            # forward the request to one of the edges
            proxy_pass http://edges;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


            # reflect the origin header back for real requests
            add_header 'Access-Control-Allow-Origin'  $http_origin  always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;

            # add the upstream address into the response headers
            add_header X-Backend-Server $upstream_addr;
        }

        # ─── NEW: proxy API calls ───────────────────────────────────
        location /api/ {
                # hide any CORS headers from upstream
                proxy_hide_header Access-Control-Allow-Origin;
                proxy_hide_header Access-Control-Allow-Methods;
                proxy_hide_header Access-Control-Allow-Headers;

                # handle preflight
                if ($request_method = OPTIONS) {
                    add_header 'Access-Control-Allow-Origin'  $http_origin  always;
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                    add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
                    add_header 'Access-Control-Max-Age'       1728000           always;
                    return 204;
                }

                proxy_pass http://apis;
                proxy_set_header Host               $host;
                proxy_set_header X-Real-IP          $remote_addr;
                proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;

                # reflect the origin header back for real requests
                add_header 'Access-Control-Allow-Origin'  $http_origin  always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;

                add_header X-API-Backend $upstream_addr;
        }
    }
}